name: moonspoon CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  EC2_PORT : ${{ secrets.EC2_PORT }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  
  RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
  RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
  RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
  RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout main project
        uses: actions/checkout@v3
        
      - name: Checkout Submodule 
        uses: actions/checkout@v3
        with:
          repository: hamlsy/private_repo
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: true
          path: private_repo
          
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Copy application.yml
        run: |
          pwd
          ls
          ls -la
          cp private_repo/application.yml src/main/resources/application.yml
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        
      - name: Build and test backend
        run: |
          ./gradlew build test

      - name: Build frontend
        run: |
          cd vue-cli
          npm install
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy frontend to S3
        run: |
          aws s3 sync vue-cli/dist s3://${{ secrets.S3_BUCKET }} --delete

      - name: Build and push Docker images
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          
          # Backend
          docker build -t $DOCKER_USERNAME/msp_back:blue .
          docker push $DOCKER_USERNAME/msp_back:blue
          
          # Frontend
          cd vue-cli
          docker build -t $DOCKER_USERNAME/msp_front:blue .
          docker push $DOCKER_USERNAME/msp_front:blue
          cd ..

      - name: Create deployment package
        run: |
          zip -r deploy.zip * -x "*.git*"

      - name: Upload to S3
        run: |
          aws s3 cp deploy.zip s3://${{ secrets.S3_BUCKET }}/deploy.zip

      - name: Create CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name Moon-Spoon \
            --deployment-group-name msp_deploy_group \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=deploy.zip,bundleType=zip

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            whoami
            docker-compose pull spring-blue vue-blue
            docker-compose up -d spring-blue vue-blue
            sleep 30
            if docker exec spring-container-blue curl -f http://localhost:8080/health && \
               docker exec vue-container-blue curl -f http://localhost:3000; then
              # Update Nginx to route to blue versions
              sed -i 's/spring-green/spring-blue/g' /path/to/nginx.conf
              sed -i 's/vue-green/vue-blue/g' /path/to/nginx.conf
              docker-compose up -d --no-deps nginx
              echo "Deployment successful, updated nginx to route to blue versions"
            else
              docker-compose stop spring-blue vue-blue
              echo "Deployment failed, rolling back"
            fi

      # - name: Cleanup old deployments
      #   if: success()
      #   uses: appleboy/ssh-action@v0.1.4
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USERNAME }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     script: |
      #       docker-compose stop spring-green vue-green
      #       docker-compose rm -f spring-green vue-green
      #       docker image prune -af
